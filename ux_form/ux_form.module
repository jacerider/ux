<?php

/**
 * @file
 * Contains ux_form.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\NestedArray;
use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Element;

/**
 * Provides theme registration for themes across .inc files.
 */
function ux_form_theme() {
  return [
    'ux_form_element_container' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_preprocess_select().
 */
function ux_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (ux_form_access()) {
    $config = ux_form_get_config();
    $form['#attributes']['class'][] = 'ux-form';
    $form['#attributes']['class'][] = 'ux-form-container-js';
    $form['#attached']['library'][] = 'ux_form/ux_form';
    if (!empty($config['theme'])) {
      $form['#attached']['library'][] = 'ux_form/ux_form.theme.' . $config['theme'];
    }
    ux_form_form_alter_process($form);
  }
}

/**
 * Process each field in a form.
 *
 * THis may seem redundant but when a field overrides the #process callback
 * our defaults are not loaded. As a result, they are added back here.
 */
function ux_form_form_alter_process(&$element) {
  if (isset($element['#type'])) {
    $ux_form_plugin_manager = \Drupal::service('plugin.manager.ux_form');
    if (isset($element['#process']) && $plugins = $ux_form_plugin_manager->getPluginsByType($element['#type'])) {
      array_unshift($element['#process'], 'ux_form_process');
    }
  }
  foreach (Element::children($element) as $id) {
    $child_element = &$element[$id];
    ux_form_form_alter_process($child_element);
  }
}

/**
 * Implements hook_element_info_alter().
 */
function ux_form_element_info_alter(&$types) {
  $ux_form_plugin_manager = \Drupal::service('plugin.manager.ux_form');
  foreach ($types as $type => $data) {
    if ($plugins = $ux_form_plugin_manager->getPluginsByType($type)) {
      $types[$type]['#process'][] = 'ux_form_process';
    }
  }
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function ux_form_field_group_build_pre_render_alter(&$element, $fieldgroups = NULL) {
  $ux_form_plugin_manager = \Drupal::service('plugin.manager.ux_form');
  $fieldgroups = $fieldgroups ? $fieldgroups : $element['#fieldgroups'];
  foreach (Element::children($element) as $id) {
    if (!isset($fieldgroups[$id])) {
      continue;
    }
    $child_element = &$element[$id];
    if (isset($child_element['#type'])) {
      $type = $child_element['#type'];
      if ($plugins = $ux_form_plugin_manager->getPluginsByType($type)) {
        ux_form_element_process($child_element);
      }
    }
    ux_form_field_group_build_pre_render_alter($child_element, $fieldgroups);
  }
}

/**
 * Process ux form elements.
 */
function ux_form_process(&$element) {
  return ux_form_element_process($element);
}

/**
 * Run an element through ux form processing.
 */
function ux_form_element_process(&$element) {
  if (!ux_form_access()) {
    return $element;
  }
  $ux_form_plugin_manager = &drupal_static(__FUNCTION__);
  if (!isset($ux_form_plugin_manager)) {
    $ux_form_plugin_manager = \Drupal::service('plugin.manager.ux_form');
  }
  $type = $element['#type'];
  foreach ($plugins = $ux_form_plugin_manager->getPluginsByType($type) as $id => $name) {
    $instance = $ux_form_plugin_manager->createInstance($id, ux_form_get_config());
    if ($instance->applies($element)) {
      $instance->process($element);
    }
  }
  return $element;
}

/**
 * Implements hook_theme_registry_alter().
 */
function ux_form_theme_registry_alter(&$theme_registry) {
  $theme_registry['fieldset']['path'] = drupal_get_path('module', 'ux_form') . '/templates';
}

/**
 * Implements hook_library_info_alter().
 */
function ux_form_library_info_alter(&$libraries, $extension) {
  if ($extension == 'webform' && isset($libraries['webform.element.inputmask'])) {
    $libraries['webform.element.inputmask']['js']['/' . drupal_get_path('module', 'ux_form') . '/js/modules/webform/webform.element.inputmask.js'] = $libraries['webform.element.inputmask']['js']['js/webform.element.inputmask.js'];
    unset($libraries['webform.element.inputmask']['js']['js/webform.element.inputmask.js']);
  }
}

/**
 * Check if ux_form should be used.
 *
 * @return bool
 *   Returns TRUE if ux_form should be used.
 */
function ux_form_access() {
  $status = &drupal_static(__FUNCTION__);
  if (!isset($status)) {
    if (ux_form_get_config()) {
      $status = TRUE;
    }
  }
  return $status;
}

/**
 * Get theme config.
 *
 * @return array
 *   An array of config options.
 */
function ux_form_get_config() {
  $theme_config = &drupal_static(__FUNCTION__);
  if (!isset($theme_config)) {
    $active_theme = \Drupal::theme()->getActiveTheme()->getName();
    $config = \Drupal::config('ux_form.settings')->get('themes');
    $theme_config = isset($config[$active_theme]) ? $config[$active_theme] : NULL;
  }
  return $theme_config;
}

/**
 * Prepares variables for container templates.
 *
 * Default template: container.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #id, #attributes, #children.
 */
function ux_form_preprocess_container(array &$variables) {
  if (isset($variables['attributes']) && $variables['attributes'] instanceof Drupal\Core\Template\Attribute) {
    $variables['attributes'] = $variables['attributes']->toArray();
  }

  if (isset($variables['attributes'])) {
    ux_form_attribute_convert($variables['attributes'], $variables['element']);
  }
}

/**
 * Implements template_preprocess_fieldset().
 */
function ux_form_preprocess_fieldset(&$variables) {
  if (isset($variables['attributes']) && $variables['attributes'] instanceof Drupal\Core\Template\Attribute) {
    $variables['attributes'] = $variables['attributes']->toArray();
  }

  if (isset($variables['attributes']) && is_array($variables['attributes'])) {
    ux_form_attribute_convert($variables['attributes'], $variables['element']);

    if (!isset($variables['legend']['title'])) {
      // Add a .no-legend class if no title is provided.
      $variables['attributes']['class'][] = 'no-legend';
    }
    else {
      $variables['attributes']['class'][] = 'has-legend';
    }
  }
}

/**
 * Prepares variables for container templates.
 *
 * Default template: ex-form-element-container.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #id, #attributes, #children.
 */
function template_preprocess_ux_form_element_container(array &$variables) {
  $element = $variables['element'];
  $variables['attributes'] = [
    'class' => ['ux-form-element', 'ux-form-element-js'],
  ];

  $is_widget = isset($element['widget']['#field_name']);
  if ($is_widget) {
    $variables['attributes']['class'][] = 'ux-form-widget';
  }
  if (isset($element['#type'])) {
    $variables['attributes']['class'][] = 'ux-form-element-type-' . Html::getClass($element['#type']);
    // Add container id to wrapper. The id is unset in the preprocess functions.
    if (in_array($element['#type'], ['fieldset', 'container'])) {
      if (isset($element['#id'])) {
        $variables['attributes']['id'] = $element['#id'];
      }
      if (isset($element['#attributes']['id'])) {
        $variables['attributes']['id'] = $element['#attributes']['id'];
      }
    }
  }
  if (isset($element['#name'])) {
    $variables['attributes']['class'][] = 'ux-form-element-name-' . Html::getClass($element['#name']);
  }
  elseif (isset($element['widget']['#field_name'])) {
    $variables['attributes']['class'][] = 'ux-form-element-name-' . Html::getClass($element['widget']['#field_name']);
  }
  if (isset($element['#attributes']['class']) && is_array($element['#attributes']['class'])) {
    foreach ($element['#attributes']['class'] as $key => $class) {
      if (!in_array($class, ['form-wrapper', 'js-form-wrapper'])) {
        $variables['attributes']['class'][] = 'ux-form-container-' . $class;
      }
    }
  }
  if (isset($element['#ux_form_attributes']) && is_array($element['#ux_form_attributes'])) {
    $variables['attributes'] = NestedArray::mergeDeep($variables['attributes'], $element['#ux_form_attributes']);
  }
  $variables['children'] = $element['#children'];
}

/**
 * Implements template_preprocess_field_multiple_value_form().
 */
function ux_form_preprocess_field_multiple_value_form(&$variables) {
  if ($variables['multiple']) {
    $table = $variables['table'];
    $button = $variables['button'];
    $fieldset = [
      '#type' => 'fieldset',
      '#id' => '',
      '#attributes' => [],
      '#ux_wrapper_supported' => TRUE,
    ];
    ux_form_element_process($fieldset);
    if (isset($variables['table'])) {
      if (!empty($variables['table']['#header'][0]['data']['#markup'])) {
        $fieldset['#title'] = $variables['table']['#header'][0]['data']['#markup'];
        unset($variables['table']['#header'][0]['data']);
      }
      $fieldset['table'] = $variables['table'];
      unset($variables['table']);
    }
    if (isset($variables['button'])) {
      $fieldset['button'] = $variables['button'];
      unset($variables['button']);
    }
    if (isset($variables['description']['content'])) {
      $fieldset['#description'] = $variables['description']['content'];
      unset($variables['description']['content']);
    }
    $variables['table'] = $fieldset;
  }
}

/**
 * Remove inherited classes and ids from fieldset and container elements.
 *
 * @param array $attributes
 *   An attributes array.
 * @param array $element
 *   An element array.
 */
function ux_form_attribute_convert(array &$attributes, array $element) {
  // Remove ID if element is wrapped.
  if (!empty($element['#ux_wrapper_supported'])) {
    if (isset($attributes['id'])) {
      unset($attributes['id']);
    }
  }
  ux_form_inline_convert($attributes);
}

/**
 * Convert container-inline to ux-form-inline class.
 *
 * @param array $attributes
 *   An attributes array.
 */
function ux_form_inline_convert(array &$attributes) {
  if (isset($attributes['class']) && is_array($attributes['class'])) {
    foreach ($attributes['class'] as $key => &$class) {
      if ($class == 'container-inline') {
        $class = 'ux-form-inline';
      }
    }
  }
}

/**
 * Get available themes.
 */
function ux_form_themes() {
  return [
    'light' => t('Light'),
    'dark' => t('Dark'),
    'blue' => t('Blue'),
    'blue.dark' => t('Blue Dark'),
    'olive' => t('Olive'),
    'pale.green' => t('Pale Green'),
    'red' => t('Red'),
    'orange' => t('Orange'),
  ];
}

/**
 * Implements hook_library_info_build().
 */
function ux_form_library_info_build() {
  $libraries = [];
  foreach (ux_form_themes() as $theme => $label) {
    $libraries['ux_form.theme.' . $theme]['css']['component']['css/themes/ux-form.' . $theme . '.css'] = [];
  }
  return $libraries;
}
